#pragma once
#include "../basics.h"
#include "output.h"
#include "../spectra/isophote.h"

class PrtIsophote: public Output {
	public:
	int isophoteId;
	PrtIsophote(char *fname, int isophoteIdA):Output(fname)
	{
		//super("lifr.dat");
		printf("Created Output\n");
		isophoteId = isophoteIdA;
	}

	void print()
	{
		for(int i=0; i<RESOLUTION; i++)
		{
			for(int j=0; j<RESOLUTION; j++)
			{
				long double phi = CIsophotes::isophotes[isophoteId]->points[i][j]->phi;
				long double theta = CIsophotes::isophotes[isophoteId]->points[i][j]->theta;
				double Fi = CIsophotes::isophotes[isophoteId]->points[i][j]->Fi;
				if(CIsophotes::isophotes[isophoteId]->isophoteType == ISOPHOTE_RATIO)
				{
					Fi = Fi/CIsophotes::isophotes[isophoteId]->points[i][j]->FiBase;
				
				}
				prt("%Le\t%Le\t%le\n",phi - App::rayToObj.angle.y, theta - App::rayToObj.angle.z, Fi);
			}
			prt("\n");
		}
	}

	void print2D()
	{
		prt("%d\t",isophoteId);
		for(int i=0; i<RESOLUTION; i++)
		{
			double phi = CIsophotes::isophotes[isophoteId]->points[i][0]->phi;
			prt("%le\t",phi);
		}
		prt("\n");
		for(int j=0; j<RESOLUTION; j++)
		{
			double theta = CIsophotes::isophotes[isophoteId]->points[0][j]->theta;
			prt("%le\t",theta);
			for(int i=0; i<RESOLUTION; i++)
			{
				double Fi = CIsophotes::isophotes[isophoteId]->points[i][j]->Fi;
				prt("%le\t",Fi);
			}
			prt("\n");
		}
	}

	static int plot()
	{
		char dirname[255];
		sprintf(dirname,"%s/plots",App::output_dir);
		DIR *st;

		st = opendir(dirname);
		if (st == NULL || !st)
		{
    			/* Directory does not exist. EEXIST for race condition */
    			mkdir(dirname, S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH);
		}

		Output *PLOT = new Output("plots/isophotes.gnu","w+");

		PLOT->prt("# This file was automatically generated by DiffRay3D software\n");
		PLOT->prt("# keep in mind that any changes, made directly to this file can\n");
		PLOT->prt("# overwritten by DiffRay3D launch\n\n");

		PLOT->prt("set terminal postscript eps enhanced color\n\n");

		for(int i=0;i<CIsophotes::nIsophotes;i++)
		{
			char type_suffix[20];
			Isophote *is = CIsophotes::isophotes[i];
			if(is->isophoteType == 0)
			{
			    sprintf(type_suffix,"cont");
			}
			else
			if(is->isophoteType == 1)
			{
			    sprintf(type_suffix,"line");
			}
			else
			if(is->isophoteType == 2)
			{
			    sprintf(type_suffix,"ratio_%s", is->chLinTo);
			}
			else
			{
			    sprintf(type_suffix,"other");
			}
			PLOT->prt("set output 'Isophote_%s_%s_App%dAge%.2lf.eps'\n",is->chLin, type_suffix, App::iApp, App::age);
			PLOT->prt("set zrange [%.3lf : %.3lf]\n",is->min(),is->max());
			PLOT->prt("set pm3d map\n");
			PLOT->prt("set xlabel 'phi'\n");
			PLOT->prt("set ylabel 'theta'\n");
			PLOT->prt("splot '../isophote_%d.dat' using 1:2:3 title '%s'\n\n",i, is->chLin);
		}
		delete PLOT;
	}
};

